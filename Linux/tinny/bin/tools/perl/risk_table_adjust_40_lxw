#!/usr/local/bin/perl 
# ---------------------------------------------------------------------------
# This scripts adjusts risk tables for sampling rates differences
# ---------------------------------------------------------------------------
# Usage: risk_table_adjust MODELNAME.ACR
# ---------------------------------------------------------------------------
# Author: AXS 01/00
#
# Update from falcon 3.x to falcon 4.x (rule language 3.0): PCD 11/01
#
# ---------------------------------------------------------------------------
use Getopt::Long;
#
#
# --------------------------------------------------------------------
# Get and process options:
# --------------------------------------------------------------------
$usage =
    "\n"
    . "\t $0 [OPTIONS] RISK_TABLE > newtable \n"
    . "\nRequired:\n\n"
    . "-s, --samplerate=RATE\t\t specifies the original sample rate\n"
    . "\nOptional:\n\n"
    . "-n, --newsamplerate=NEWRATE\t specifies the NEW sample rate (1 by default)\n"
    . "-d, --defaultrate=NEWRATE\t specifies the new default sample rate\n"
    . "\t\t\t\t (by default, equal to value specified by -n)\n"
    . "-h, --help\t\t\t prints this message.\n"
    . "\nReport bugs to mxs\@hnc.com\n";

$Getopt::Long::autoabbrev= 1;
@optl= ("samplerate=f","newsamplerate=f","defaultrate=f","help");
die "Usage:  $usage" unless (GetOptions @optl);
die "Usage:  $usage" if ($opt_help);
die "Usage:  $usage" unless ($opt_samplerate);
#
$sample_rate= $opt_samplerate;
$new_sample_rate= ($opt_newsamplerate) ? $opt_newsamplerate : 1.0;
$new_default_rate = ($opt_defaultrate) ? $opt_defaultrate : $new_sample_rate;
#
# Checks
print STDERR "\nTHE FOLLOWING ASSUMPTIONS WERE MADE:\n";
print STDERR "\n---------------------------------------------------------------------\n";
printf(STDERR "- The original sampling rate was %2.4f (%2.2f%%).\n", $sample_rate, 100*$sample_rate);
printf(STDERR "- The new (requested) sampling rate is %2.4f (%2.2f%%).\n", $new_sample_rate, 100*$new_sample_rate);
print STDERR "---------------------------------------------------------------------\n";
print STDERR "\nPLEASE CHECK INFORMATION ABOVE!\n";

# --------------------------------------------------------------------
# Search for data
# --------------------------------------------------------------------
$"=","; # Output interpolated list separator
$nlines= 0;
while (<>){
  print;
  #When new table is found, first process the header lines, then the data lines
  if (/^TABLE/){  
    (undef, $table_name, undef, $table_type) = split; 
    $sum_tran=0;
    $sum_sampled_total_tran=0;
    while ( <> ) {
      print;
      if (/DEFAULT *=/) {
        $_= <>; #risk*gen40 breaks the line before default table data
        chomp;
        if ($table_type ne "A_SICxAMT_RISK_DATA"){
           ($code, $sampled_total_tran, $num_frauds, @field) = split(/,/);
           # Correct for sampling:
           $corr_total_tran= ($sampled_total_tran-$num_frauds)*$new_default_rate/$sample_rate + $num_frauds;
           $corr_total_tran= int($corr_total_tran+0.5);
           #For the SICxAMT tables, first field is risk for the sic 
           $code= sprintf("%.4f",$num_frauds/$corr_total_tran) if ($table_type eq "AMT_RISK_DATA" and $corr_total_tran > 0);
           print "$code,$corr_total_tran,$num_frauds,@field\n";
         }else{ print "$_\n";}
      } elsif (/^NUM_ROWS *= *(\d+)/) {
        $nlines= $1;
      } elsif (/^DATA *=/) {
        if ($nlines == 0) { die "Table $table_name not properly read\n"; }
        print STDERR "\nTable $table_name should contain $nlines entries.\n";
        
        # Read risk table data lines
        @field= ();
        for ($i=0 ; $i<$nlines ; $i++){
          $_ = <>;
          chomp;
          if ($table_type ne "A_SICxAMT_RISK_DATA"){
            ($code, $sampled_total_tran, $num_frauds, @field) = split(/,/);
            # Correct for sampling:
            $corr_total_tran= ($sampled_total_tran-$num_frauds)*$new_sample_rate/$sample_rate + $num_frauds;
            $corr_total_tran= int($corr_total_tran+0.5);
            # Sum
            $sum_tran +=  $corr_total_tran;
            $sum_sampled_total_tran +=  $sampled_total_tran;
            print "$code,$corr_total_tran,$num_frauds,@field\n";
          }else{ print "$_\n"; }
        }
        printf(STDERR "Based on %s (sampled) transactions.\n", commify($sum_sampled_total_tran)) if ($table_type ne "A_SICxAMT_RISK_DATA");
        last; #go back to top level loop
      } else {
        next; #possibly comments or "NO_SORT"
      }
    }
  }
}

# --------------------------------------------------------------------
# Pretty print
# --------------------------------------------------------------------
sub commify {
    local($_) = shift;
    1 while s/^(-?\d+)(\d{3})/$1,$2/;
    return $_;
}

