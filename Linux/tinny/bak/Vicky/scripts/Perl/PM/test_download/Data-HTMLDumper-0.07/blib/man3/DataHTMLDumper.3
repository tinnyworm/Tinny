.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTMLDumper 3"
.TH HTMLDumper 3 "2004-10-07" "perl v5.8.2" "User Contributed Perl Documentation"
.SH "NAME"
Data::HTMLDumper \- Uses Data::Dumper to make HTML tables of structures
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Data::HTMLDumper;
.Ve
.PP
.Vb 4
\&  # to take control of the output:
\&  Data::HTMLDumper->actions($your_action_object);
\&  # See Data::HTMLDumper::Output.pm for what $your_action_object must do,
\&  # or see CONTROLLING OUTPUT below for a small example.
.Ve
.PP
.Vb 1
\&  ...
.Ve
.PP
.Vb 1
\&  print Dumper(\e%hash, \e@list);
.Ve
.PP
.Vb 2
\&  # or to supply names like Data::Dumper->Dump:
\&  print Data::HTMLDumper->Dump([\e%hash, \e@list], [qw(hash list)]);
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
.Vb 3
\&  Data::HTMLDumper turns Data::Dumper output into HTML tables.
\&  It's for those who like Data::Dumper for quick peeks at their
\&  structures, but need to display the output in a web browser.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If you like to use Data::Dumper for quick and dirty pictures of your structures
during development, but you are now developing for the web, this module might
be for you.  It uses Data::Dumper, but formats the results as \s-1HTML\s0 tables.
.PP
The format of the tables changed with the introduction of Parse::RecDescent
with version 0.04.  The new tables are more consistent.
.PP
As of version 0.06 the Dumper function handles any number of references.
The object oriented Dump method works like its analog in Data::Dumper.
The rest of the functions (except new) are not yet available (but
see '\s-1SPECIAL\s0 \s-1VARIABLES\s0' for how to avoid needing some of them).
.SH "SPECIAL VARIABLES"
.IX Header "SPECIAL VARIABLES"
Several special variables are available as of version 0.06.  This include
Maxdepth (to limit how deep the traversal goes), Varname (to let you replace
\&\f(CW$VAR2\fR with \f(CW$YourPrefix2\fR), and Sortkeys (which sorts hash keys as strings).
Currently you must use these through the following special variables:
.PP
.Vb 3
\&    $Data::HTMLDumper::Maxdepth;
\&    $Data::HTMLDumper::Varname;
\&    $Data::HTMLDumper::Sortkeys;
.Ve
.PP
Note that to even see the Varname prefix, you must implement your own
callback object, perhaps by subclassing Data::HTMLDumper::Output.
.SH "CONTROLLING OUTPUT"
.IX Header "CONTROLLING OUTPUT"
If you need to change the way the tables appear, you can (as of version 0.06)
subclass Data::HTMLDumper::Output to implement your changes.  You must also
tell Data::HTMLDumper to make the change.  Here is a sample similar to
one used in test number 09:
.PP
.Vb 1
\&    use Data::HTMLDumper;
.Ve
.PP
.Vb 1
\&    Data::HTMLDumper->actions(MyOutput->new());
.Ve
.PP
.Vb 1
\&    my $data = [qw(some data)];
.Ve
.PP
.Vb 1
\&    print Data::HTMLDumper->Dump([$data], ['data']);
.Ve
.PP
.Vb 1
\&    package MyOutput;
.Ve
.PP
.Vb 1
\&    use base 'Data::HTMLDumper::Output';
.Ve
.PP
.Vb 3
\&    sub expression {
\&        my $self = shift;
\&        my %item = @_;
.Ve
.PP
.Vb 3
\&        return "<table border='1'><tr><th>$item{ID_NAME}</th></tr>\en"
\&             . "$item{item}</table>\en";
\&    }
.Ve
.PP
This adds a heading row to each table listing the name supplied
to Dump (it would use \s-1VAR1\s0 if you called Dumper).
.PP
The key is to create your own package (MyOutput above) making it inherit
from Data::HTMLDumper::Output (e.g. via use base).  This saves you having
to implement all of the Output methods (of which there are about 12).
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
Dumper
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Data::Dumper
Parse::RecDescent
Data::HTMLDumper::Output
.SH "BUGS and OMISSIONS"
.IX Header "BUGS and OMISSIONS"
Though Data::Dumper is used, not all (or even most) of its features are
implemented.
.PP
These features will be added as developer time permits:
.PP
.Vb 4
\&    Seen
\&    Values
\&    Names
\&    Reset
.Ve
.PP
Some of these may be implemented depending on interest:
.PP
.Vb 3
\&    Terse
\&    Deepcopy
\&    Freezer
.Ve
.PP
Here is a list of features that will never be available (with explanations
of what to do instead):
.IP "Indent" 4
.IX Item "Indent"
this affects the appearance of the text output.  To affect the appearance
of the \s-1HTML\s0 tables (or to do something totally different) implement a
subclass of Data::HTMLDumper::Output
.IP "Purity" 4
.IX Item "Purity"
builds fully \*(L"eval\*(R"able code.  What we're doing here is making pretty \s-1HTML\s0
tables.  There is no use to replicating Data::Dumper's ability to restore
data structures.
.IP "Pad" 4
.IX Item "Pad"
like indent, this affects the appearance of the output.
.IP "Useqq" 4
.IX Item "Useqq"
controls how special characters in strings are masked.  \s-1HTML\s0 requires a
different approach, see Data::HTMLDumper::Output\->string for an example
of the kind of work you need to do to have things rendered properly.
.IP "Toaster" 4
.IX Item "Toaster"
allows objects to control how they are displayed.  Override the callback method
Data::HTMLDumper::Output\->object to control object display.  Redispatch
to the object or its class if you like.
.IP "Quotekeys" 4
.IX Item "Quotekeys"
controls whether quotes are always used around hash keys.  Data::HTMLDumper
strips these during parsing, whether they appear or not.  You can control
the appearance of hash keys by overriding Data::HTMLDumper::Output\->pair.
.IP "Bless" 4
.IX Item "Bless"
allows the caller to replace the builtin bless with their own function.
Since we are only concerned with appearance here, you should implement
your own Data::HTMLDumper::Output\->object.
.IP "Useperl" 4
.IX Item "Useperl"
for developers of Data::Dumper to turn off \s-1XS\s0 use during debugging.
.IP "Deparse" 4
.IX Item "Deparse"
tries to turn code references back into Perl source with B::Deparse.
.PP
Attempts to access these concepts through direct use of Data::Dumper
is not wise.  Doing so will alter the output of Data::Dumper (duh).
That new form will not agree with my grammar and Bad Things will
happen, such as fatal parsing errors.
.PP
Starting with version 0.04 Data::HTMLDumper uses Parse::RecDescent instead
of its old regex substitution scheme.  This means that your structure will
produce nothing but an error if my grammar is not good enough.  If that
happens to you, please send me a sample of the structure so that I can
correct the grammar.
.PP
Starting with version 0.06 you can call Data::Dumper with multiple arguments,
but the test suite for this is not complete.  If you encounter problems,
please send in samples of what broke.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module depends on Data::Dumper to do the real work.  Check its
documentation for details about how to call Dumper and Dump.
.PP
As of version 0.06 Data::HTMLDumper uses Data::HTMLDumper::Output to
produce the tables.  By subclassing it, or replacing it, you can
take a considerable amount of control over the appearance of the final
output.  You could even produce \s-1XML\s0 or something else.
.SH "AUTHOR"
.IX Header "AUTHOR"
Phil Crow, <philcrow2000@yahoo.com<gt>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2003\-4 by Phil Crow
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl 5.8.0 itself. 
.SH "CREDITS"
.IX Header "CREDITS"
Thanks to Dennis Sutch for patches and encouragement to make the module
substantially more robust.
