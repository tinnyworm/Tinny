.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "R 3"
.TH R 3 "2003-06-13" "perl v5.8.2" "User Contributed Perl Documentation"
.SH "NAME"
R \- Perl extension for R, the statistical computing environment
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use R;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\& This module allows one to call R functions, evaluate R expressions
\& and access R objects from within the Perl language. R's statistical,
\& numeric and graphical functionality are immediately available.
.Ve
.SH "Calling S Functions"
.IX Header "Calling S Functions"
This is is the primary mechanism in this module by which one can invoke an S function
from Perl. The arguments are 
=over 4
=item[1] the name of the S function or an RFunctionReference object
   obtained from an earlier computation
=item[2] an arbitrary number of arguments which are converted to S values
  and used as arguments to the S function, in the same order they 
  are giving here.
=back  
.PP
If the value of this call is assigned in Perl or passed on to another
call, the return value from the S function is converted to a Perl
object. Otherwise, it is ignored.
.SH "Call With Named Arguments"
.IX Header "Call With Named Arguments"
This allows one to call an S function, passing
some of the arguments by name rather than position.
The arguments to this are:
=over 4
=item a)
  an identifier for an S function,
  either a name or an \f(CW\*(C`RFunctionReference\*(C'\fR
  object computed in an earlier call.
=item b)
  a hash of name-value pairs.
  Currently, you must name all the arguments.
  In the near future, this will be extended to allow
  an array of names-value pairs with some values allowed to be
  \f(CW''\fR.
=back
.PP
The return value of the S function is converted 
to a Perl object (if the result is assigned).
.SH "R initialization"
.IX Header "R initialization"
Initialize the R engine. This must be done 
 first when running R within Java,
 before making any calls to R functions or accessing
 R objects. The arguments should be character strings
 as if they were command line arguments to the R 
 process. 
.SH "Evaluating S expressions"
.IX Header "Evaluating S expressions"
This routine provides a mechanism for evaluating 
S expressions given as strings in the S language.
Because one must first construct the string,
and since it cannot refer to any Perl or anonymous S 
objects, it is less rich that than the 
\&\f(CW\*(C`call\*(C'\fR and \f(CW\*(C`callWithNames\*(C'\fR routines. However, it is
convenient for evaluating self-contained S expressions
such as interactive queries of the state of the S session,
defining functions and methods, etc.
.PP
.Vb 2
\&  @x = R::eval("search");
\&  R::eval("myFun <<- function(n) { rnorm(n) + 100 }");
.Ve
.SH "Register a user-level converter."
.IX Header "Register a user-level converter."
This function allows one to register a user-level converter that are
used when converting a non-primitive S object to a Perl value. When
the conversion is attempted, we loop over all registered converters
and ask the predicate/matching function in the converter whether the
converter can process the S object. If it can (returning \s-1TRUE\s0), then
we call the actual converter function in this converter.
One can use closures, etc. to parameterize the converter and matching
routines.
.PP
See converter.pl in the examples/ directory.
.SH "Discard R Reference Value"
.IX Header "Discard R Reference Value"
This routine allows us to remove an element in the S reference
manager that maintains a list of the different S objects that have
been exported as references to Perl.  This helps us free resources
being used by S objects for which we no longer need the reference in
Perl. This is rarely used explicitly by the user, but implicitly
during the destruction of an \f(CW\*(C`RReference\*(C'\fR object.
.SH "\fIsetDebug()\fP"
.IX Header "setDebug()"
This allows one to dynamically toggle the debug status
(i.e. the variable \f(CW\*(C`RPerlDebug\*(C'\fR)
for this module. If \f(CW\*(C`RPerlDebug\*(C'\fR is \f(CW\*(C`TRUE\*(C'\fR,
then a very large number of messages are printed to the console
from this module explaining detailing different steps in its activities.
.SH "Loading an S library"
.IX Header "Loading an S library"
This is a convenience mechanism for loading an R library and
processing the return value easily.  This could be deprecated now that
we discard return values that are not assigned in Perl.
.PP
.Vb 2
\&  R::library("mva");
\&  $ok = R::call("library", "mva");
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Duncan Temple Lang duncan@research.bell\-labs.com
Bug reports to omega\-bugs@omegahat.org.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
.PP
http://www.omegahat.org/RSPerl
