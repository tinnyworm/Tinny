.\" Automatically generated by Pod::Man version 1.02
.\" Wed Aug  6 17:22:52 2003
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Random 3"
.TH Random 3 "perl v5.6.0" "2003-03-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\fBMath::Random\fR \- Random Number Generators
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Ip "\(bu" 4
.Vb 1
\& use Math::Random;
.Ve
Exports the following routines by default (see the DEFAULT ROUTINES entry elsewhere in this document):
.Sp
.Vb 9
\& random_set_seed_from_phrase
\& random_get_seed
\& random_seed_from_phrase
\& random_set_seed
\& random_uniform
\& random_uniform_integer
\& random_permutation
\& random_permuted_index
\& random_normal
.Ve
In this case the extended routines (see the section on "EXTENDED ROUTINES") can be
used by    qualifying  them  explicitly  with \f(CW\*(C`Math::Random::\*(C'\fR,   for
example: \f(CW\*(C`$stdexp = Math::Random::random_exponential();\*(C'\fR
.Ip "\(bu" 4
.Vb 21
\& use Math::Random qw(random_beta
\&                     random_chi_square
\&                     random_exponential
\&                     random_f
\&                     random_gamma
\&                     random_multivariate_normal
\&                     random_multinomial
\&                     random_noncentral_chi_square
\&                     random_noncentral_f
\&                     random_normal
\&                     random_permutation
\&                     random_permuted_index
\&                     random_uniform
\&                     random_poisson
\&                     random_uniform_integer
\&                     random_negative_binomial
\&                     random_binomial
\&                     random_seed_from_phrase
\&                     random_get_seed
\&                     random_set_seed_from_phrase
\&                     random_set_seed );
.Ve
Exports all the routines explicitly.  Use a subset of the list for the
routines you want.
.Ip "\(bu" 4
.Vb 1
\& use Math::Random qw(:all);
.Ve
Exports all the routines, as well.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBMath::Random\fR is  a \fBPerl\fR port  of the \fBC\fR version of \fBrandlib\fR,
which is   a suite of  routines for  generating  random deviates.  See
the section on "RANDLIB" for more information.
.PP
This port supports all of the distributions  from which the \fBFortran\fR
and \fBC\fR  versions generate deviates.   The major functionalities that
are excluded  are   the  multiple  generators/splitting  facility  and
antithetic  random number  generation.   These facilities,  along with
some of  the distributions which \fIare\fR  included, are probably not of
interest   except  to the   very  sophisticated   user.  If there   is
sufficient interest, the excluded   facilities will be included in   a
future  release.   The code  to   perform the  excluded facilities  is
available as \fBrandlib\fR in \fBFortran\fR and \fBC\fR source.
.Sh "Default routines:"
.IX Subsection "Default routines:"
The routines which are exported by default are  the only ones that the
average \fBPerl\fR programmer is likely to need.
.Ip "\f(CW\*(C`random_set_seed_from_phrase($phrase)\*(C'\fR" 4
.IX Item "random_set_seed_from_phrase($phrase)"
Sets  the  seed   of the  base  generator  to   a  value determined by
\&\fI$phrase\fR.  The value used for a given  \fI$phrase\fR is consistent from
implementation to implementation  (it   does not rely on   the machine
collating sequence).    \fBNote:\fR  When the   \fBPerl\fR processor   loads
package  \fBMath::Random\fR  the seed  is set   to a value  based on  the
current time.  The seed  changes  each time \fBMath::Random\fR  generates
something random.
.Sp
The ability to set the seed is useful for debugging,  or for those who
like reproducible runs.
.Ip "\f(CW\*(C`random_get_seed()\*(C'\fR" 4
.IX Item "random_get_seed()"
Returns  an   array of  length two  which  contains  the  two integers
constituting  the seed   (assuming   a call   in array   context).  An
invocation   in  a scalar  context  returns   the  integer 2, which is
probably not useful.
.Ip "\f(CW\*(C`random_seed_from_phrase($phrase)\*(C'\fR" 4
.IX Item "random_seed_from_phrase($phrase)"
Returns   an  array of  length  two which  contains   the two integers
consituting   the seed   (assuming a    call  in array  context).   An
invocation   in  a scalar  context returns  the   integer  2, which is
probably not useful.  The  seed generated is the seed  used to set the
seed in a  call to \f(CW\*(C`random_set_seed_from_phrase\*(C'\fR.
.Sp
\&\fBNote:\fR   the  following  two calls  (for   the  same \fI$phrase\fR) are
equivalent:
.Sp
.Vb 1
\& random_set_seed(random_seed_from_phrase($phrase));
.Ve
and
.Sp
.Vb 1
\& random_set_seed_from_phrase($phrase);
.Ve
.Ip "\f(CW\*(C`random_set_seed(@seed)\*(C'\fR" 4
.IX Item "random_set_seed(@seed)"
Sets  the  seed  of the  base  generator  to  the value \fI@seed\fR[0,1].
Usually, the  argument  \fI@seed\fR should be  the result  of  a  call to
\&\f(CW\*(C`random_get_seed\*(C'\fR  or \f(CW\*(C`random_seed_from_phrase\*(C'\fR.  \fI@seed\fR[0,1] must
be two integers in the range (1,\ 1) to (2147483562,\ 2147483398),
inclusive.
.Ip "\f(CW\*(C`random_uniform($n, $low, $high)\*(C'\fR" 4
.IX Item "random_uniform($n, $low, $high)"
.Ip "\f(CW\*(C`random_uniform($n)\*(C'\fR" 4
.IX Item "random_uniform($n)"
.Ip "\f(CW\*(C`random_uniform()\*(C'\fR" 4
.IX Item "random_uniform()"
When called  in an array context,  returns an array of  \fI$n\fR deviates
generated from   a \fIuniform($low,\fR\ \fI$high)\fR distribution.    When
called in  a scalar context,    generates and returns only  one   such
deviate as a scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions: \fI$low\fR must be less than or equal to \fI$high\fR.
.Sp
Defaults are  (1, 0, 1).    \fBNote:\fR  \fI$high\fR must   be specified if
\&\fI$low\fR is specified.
.Ip "\f(CW\*(C`random_uniform_integer($n, $low, $high)\*(C'\fR" 4
.IX Item "random_uniform_integer($n, $low, $high)"
When called  in an array context,  returns  an array of  \fI$n\fR integer
deviates generated from  a  \fIuniform($low,\fR\ \fI$high)\fR distribution
on the   integers.  When called   in a  scalar context, generates  and
returns only one such deviate as a  scalar, regardless of the value of
\&\fI$n\fR.
.Sp
Argument  restrictions: \fI$low\fR and \fI$high\fR  are  first rounded using
\&\f(CW\*(C`int()\*(C'\fR; the resulting \fI$low\fR must be less than or equal to \fI$high\fR,
and the resulting  range \fI($high \- \f(CI$low\fI)\fR  must not  be  greater than
2147483561.
.Sp
There are no defaults; all three arguments must be provided.
.Ip "\f(CW\*(C`random_permutation(@array)\*(C'\fR" 4
.IX Item "random_permutation(@array)"
Returns \fI@array\fR, randomly permuted.
.Ip "\f(CW\*(C`random_permuted_index($n)\*(C'\fR" 4
.IX Item "random_permuted_index($n)"
Returns  an array  of  array indices, randomly  permuted.  The indices
used are (0,\ ...\ ,(\fI$n\fR\ \-\ 1)).  This produces the indices used
by \f(CW\*(C`random_permutation\*(C'\fR for a given seed, without passing arrays.
.Sp
\&\fBNote:\fR the following are equivalent:
.Sp
.Vb 2
\& random_set_seed_from_phrase('jjv');
\& random_permutation(@array);
.Ve
and
.Sp
.Vb 2
\& random_set_seed_from_phrase('jjv');
\& @array[(random_permuted_index(scalar(@array)))];
.Ve
.Ip "\f(CW\*(C`random_normal($n, $av, $sd)\*(C'\fR" 4
.IX Item "random_normal($n, $av, $sd)"
.Ip "\f(CW\*(C`random_normal($n, $av)\*(C'\fR" 4
.IX Item "random_normal($n, $av)"
.Ip "\f(CW\*(C`random_normal($n)\*(C'\fR" 4
.IX Item "random_normal($n)"
.Ip "\f(CW\*(C`random_normal()\*(C'\fR" 4
.IX Item "random_normal()"
When called in  an array context, returns  an array  of \fI$n\fR deviates
generated from a \fInormal($av, \f(CI$sd\fI^2)\fR distribution.  When called in a
scalar context,  generates  and returns  only one  such   deviate as a
scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions: \fI$sd\fR must be non-negative.
.Sp
Defaults are (1, 0, 1).
.Sh "Extended Routines:"
.IX Subsection "Extended Routines:"
These routines generate deviates from many other distributions.
.PP
\&\fBNote:\fR The parameterizations of these deviates are standard (insofar
as there \fIis\fR a  standard ...  ) but  particular attention  should be
paid to the distributions of the \fIbeta\fR  and \fIgamma\fR deviates (noted
in \f(CW\*(C`random_beta\*(C'\fR and \f(CW\*(C`random_gamma\*(C'\fR below).
.Ip "\f(CW\*(C`random_beta($n, $aa, $bb)\*(C'\fR" 4
.IX Item "random_beta($n, $aa, $bb)"
When called in an array  context, returns an  array of \fI$n\fR  deviates
generated from  the  \fIbeta\fR distribution  with parameters  \fI$aa\fR and
\&\fI$bb\fR.  The density of the beta is:
.Sp
X^(\fI$aa\fR \- 1) * (1 \- X)^(\fI$bb\fR \- 1) / B(\fI$aa\fR , \fI$bb\fR) for 0 < X <
1.
.Sp
When called in  a scalar context, generates  and returns only one such
deviate as a scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions:  Both \fI$aa\fR and \fI$bb\fR must  not  be less than
\&\f(CW\*(C`1.0E\-37\*(C'\fR.
.Sp
There are no defaults; all three arguments must be provided.
.Ip "\f(CW\*(C`random_binomial($n, $nt, $p)\*(C'\fR" 4
.IX Item "random_binomial($n, $nt, $p)"
When called  in an array context,  returns an array  of \fI$n\fR outcomes
generated  from the  \fIbinomial\fR  distribution with  number  of trials
\&\fI$nt\fR and probability of an  event in each  trial \fI$p\fR.  When called
in a scalar context, generates and returns  only one such outcome as a
scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions: \fI$nt\fR  is rounded  using \f(CW\*(C`int()\*(C'\fR; the  result
must be non-negative.  \fI$p\fR must be between 0 and 1 inclusive.
.Sp
There are no defaults; both arguments must be provided.
.Ip "\f(CW\*(C`random_chi_square($n, $df)\*(C'\fR" 4
.IX Item "random_chi_square($n, $df)"
When called in an  array context, returns an  array of \fI$n\fR  deviates
generated from the \fIchi-square\fR  distribution with \fI$df\fR degrees  of
freedom.  When called in a  scalar context, generates and returns only
one such deviate as a scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions: \fI$df\fR must be positive.
.Sp
There are no defaults; both arguments must be provided.
.Ip "\f(CW\*(C`random_exponential($n, $av)\*(C'\fR" 4
.IX Item "random_exponential($n, $av)"
.Ip "\f(CW\*(C`random_exponential($n)\*(C'\fR" 4
.IX Item "random_exponential($n)"
.Ip "\f(CW\*(C`random_exponential()\*(C'\fR" 4
.IX Item "random_exponential()"
When  called in an  array context, returns  an array of \fI$n\fR deviates
generated from the \fIexponential\fR distribution with mean \fI$av\fR.  When
called    in a scalar  context, generates   and  returns only one such
deviate as a scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions: \fI$av\fR must be non-negative.
.Sp
Defaults are (1, 1).
.Ip "\f(CW\*(C`random_f($n, $dfn, $dfd)\*(C'\fR" 4
.IX Item "random_f($n, $dfn, $dfd)"
When called  in an array  context, returns an  array of \fI$n\fR deviates
generated from the \fIF\fR  (variance ratio) distribution with degrees of
freedom \fI$dfn\fR (numerator) and \fI$dfd\fR (denominator).  When called in
a scalar context,  generates and  returns only  one such deviate  as a
scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions: Both \fI$dfn\fR and \fI$dfd\fR must be positive.
.Sp
There are no defaults; all three arguments must be provided.
.Ip "\f(CW\*(C`random_gamma($n, $a, $r)\*(C'\fR" 4
.IX Item "random_gamma($n, $a, $r)"
When called in  an array context, returns  an array of  \fI$n\fR deviates
generated from  the  \fIgamma\fR distribution  with  parameters \fI$a\fR and
\&\fI$r\fR.  The density of the gamma is:
.Sp
(\fI$a\fR**\fI$r\fR) / Gamma(\fI$r\fR) * X**(\fI$r\fR \- 1) * Exp(-\fI$a\fR*X)
.Sp
When called in  a scalar context, generates and  returns only one such
deviate as a scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions: Both \fI$a\fR and \fI$r\fR must be positive.
.Sp
There are no defaults; all three arguments must be provided.
.Ip "\f(CW\*(C`random_multinomial($n, @p)\*(C'\fR" 4
.IX Item "random_multinomial($n, @p)"
When called in an array  context, returns single observation from  the
\&\fImultinomial\fR distribution, with \fI$n\fR events classified into as many
categories as the length of \fI@p\fR.   The probability of an event being
classified into category \fIi\fR is given by the \fIi\fRth element of \fI@p\fR.
The observation is an array with length equal to \fI@p\fR, so when called
in a scalar  context it  returns  the length  of \f(CW@p\fR.   The sum of  the
elements of the observation is equal to \fI$n\fR.
.Sp
Argument  restrictions: \fI$n\fR is  rounded  with \f(CW\*(C`int()\*(C'\fR before it  is
used; the  result  must be  non-negative.   \fI@p\fR must have  length at
least 2.  All elements of \fI@p\fR except the  last must be between 0 and
1  inclusive, and sum to  no  more than   0.99999.  \fBNote:\fR The  last
element of \fI@p\fR is a dummy to indicate  the number of categories, and
it is adjusted to bring the sum of the elements of \fI@p\fR to 1.
.Sp
There are no defaults; both arguments must be provided.
.Ip "\f(CW\*(C`random_multivariate_normal($n, @mean, @covar)\*(C'\fR" 4
.IX Item "random_multivariate_normal($n, @mean, @covar)"
When  called in an array context,  returns  an array of \fI$n\fR deviates
(each   deviate  being    an  array  reference) generated   from   the
\&\fImultivariate  normal\fR  distribution with  mean  vector \fI@mean\fR  and
variance-covariance  matrix  \fI@covar\fR.     When called  in  a  scalar
context,  generates and  returns only  one  such  deviate  as an array
reference, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions: If the dimension of the deviate to be generated
is \fIp\fR,  \fI@mean\fR  should be a   length \fIp\fR array  of real  numbers.
\&\fI@covar\fR should be  a length \fIp\fR array of  references to length \fIp\fR
arrays of real  numbers  (i.e.  a  \fIp\fR  by  \fIp\fR  matrix).   Further,
\&\fI@covar\fR should be a symmetric positive-definite matrix, although the
\&\fBPerl\fR code does  not check positive-definiteness, and the underlying
\&\fBC\fR code    assumes  the  matrix  is   symmetric.    Given that   the
variance-covariance matrix is  symmetric, it   doesn't matter if   the
references  refer   to rows  or columns.   If  a non-positive definite
matrix is passed  to the function,  it  will abort with the  following
message:
.Sp
.Vb 1
\& COVM not positive definite in SETGMN
.Ve
Also,  a    non-symmetric   \fI@covar\fR may    produce  deviates without
complaint,  although they may not  be  from the expected distribution.
For  these reasons, you  are   encouraged  to \fIverify  the  arguments
passed\fR.
.Sp
The \fBPerl\fR code \fIdoes\fR   check  the dimensionality of \fI@mean\fR   and
\&\fI@covar\fR for consistency.  It does so by  checking that the length of
the argument  vector  passed is  odd,  that  what  should be the  last
element of \fI@mean\fR and the first element  of \fI@covar\fR look like they
are a number followed by an array reference respectively, and that the
arrays referred to in \fI@covar\fR are as long as \fI@mean\fR.
.Sp
There are no defaults; all three arguments must be provided.
.Ip "\f(CW\*(C`random_negative_binomial($n, $ne, $p)\*(C'\fR" 4
.IX Item "random_negative_binomial($n, $ne, $p)"
When  called in an  array context, returns  an array of \fI$n\fR outcomes
generated from the  \fInegative  binomial\fR distribution with number  of
events \fI$ne\fR and  probability of an event  in each trial \fI$p\fR.  When
called  in  a scalar   context, generates  and  returns only  one such
outcome as a scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions: \fI$ne\fR is   rounded using \f(CW\*(C`int()\*(C'\fR, the  result
must be positive.  \fI$p\fR must be between 0 and 1 exclusive.
.Sp
There are no defaults; both arguments must be provided.
.Ip "\f(CW\*(C`random_noncentral_chi_square($n, $df, $nonc)\*(C'\fR" 4
.IX Item "random_noncentral_chi_square($n, $df, $nonc)"
When called in  an array context, returns  an array  of \fI$n\fR deviates
generated  from the \fInoncentral  chi-square\fR distribution with \fI$df\fR
degrees of freedom and noncentrality  parameter \fI$nonc\fR.  When called
in a scalar context, generates and returns only  one such deviate as a
scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions:   \fI$df\fR must be at  least  1, \fI$nonc\fR must be
non-negative.
.Sp
There are no defaults; all three arguments must be provided.
.Ip "\f(CW\*(C`random_noncentral_f($n, $dfn, $dfd, $nonc)\*(C'\fR" 4
.IX Item "random_noncentral_f($n, $dfn, $dfd, $nonc)"
When called in  an array context, returns an  array of  \fI$n\fR deviates
generated from the \fInoncentral F\fR  (variance ratio) distribution with
degrees of freedom \fI$dfn\fR (numerator)  and \fI$dfd\fR (denominator); and
noncentrality parameter \fI$nonc\fR.   When  called in a  scalar context,
generates and returns only one such deviate as a scalar, regardless of
the value of \fI$n\fR.
.Sp
Argument restrictions:  \fI$dfn\fR must  be at least   1, \fI$dfd\fR must be
positive, and \fI$nonc\fR must be non-negative.
.Sp
There are no defaults; all four arguments must be provided.
.Ip "\f(CW\*(C`random_poisson($n, $mu)\*(C'\fR" 4
.IX Item "random_poisson($n, $mu)"
When called  in an array context,  returns an array  of \fI$n\fR outcomes
generated  from the \fIPoisson\fR  distribution  with mean  \fI$mu\fR.  When
called  in a  scalar   context, generates and  returns  only  one such
outcome as a scalar, regardless of the value of \fI$n\fR.
.Sp
Argument restrictions: \fI$mu\fR must be non-negative.
.Sp
There are no defaults; both arguments must be provided.
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
The \fBPerl\fR code should \f(CW\*(C`croak\*(C'\fR if bad arguments are passed or if the
underlying \fBC\fR code  cannot allocate the  necessary memory.  The only
error which should kill the job without  \f(CW\*(C`croak\*(C'\fRing is a non-positive
definite         variance-covariance      matrix      passed        to
\&\f(CW\*(C`random_multivarite_normal\*(C'\fR (see the section on "EXTENDED ROUTINES").
.SH "RANDLIB"
.IX Header "RANDLIB"
\&\fBrandlib\fR  is available in \fBFortran\fR and  \fBC\fR source form, and will
soon be available in \fBFortran90\fR source as well.  \fBrandlib.c\fR can be
obtained from     \fBstatlib\fR.  Send mail   whose  message   is \fI'send
randlib.c.shar from general'\fR to:
.PP
.Vb 1
\&                       statlib@lib.stat.cmu.edu
.Ve
\&\fBrandlib.c\fR   can  also  be    obtained    by  anonymous  \fBftp\fR   to:
.PP
.Vb 1
\&                  odin.mdacc.tmc.edu (143.111.62.32)
.Ve
where it is available as
.PP
.Vb 1
\&                   /pub/source/randlib.c-1.3.tar.gz
.Ve
For obvious reasons, the original \fBrandlib\fR  (in \fBFortran\fR) has been
renamed to
.PP
.Vb 1
\&                   /pub/source/randlib.f-1.3.tar.gz
.Ve
on the same machine.
.PP
Our \s-1FTP\s0 index is on file \f(CW\*(C`./pub/index\*(C'\fR.
.PP
If you have Internet access and a browser you might note the following
web site addresses:
.PP
University of Texas M. D. Anderson Cancer Center Home Page:
.PP
.Vb 1
\&                    http://utmdacc.mdacc.tmc.edu/
.Ve
Department of Biomathematics Home Page:
.PP
.Vb 1
\&                      http://odin.mdacc.tmc.edu/
.Ve
Available Software:
.PP
.Vb 1
\&                  http://odin.mdacc.tmc.edu/anonftp/
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
This work  was supported  in part by  grant \s-1CA-16672\s0 from the National
Cancer Institute.  We are grateful  to Larry and  Pat McNeil of Corpus
Cristi for their generous support.  Some equipment used in this effort
was provided by \s-1IBM\s0 as part of a cooperative study agreement; we thank
them.
.SH "CODE MANIPULATION"
.IX Header "CODE MANIPULATION"
The   \fBC\fR  version of  \fBrandlib\fR  was  obtained  by  translating the
original   \fBFortran\fR     \fBrandlib\fR  using  \fB\s-1PROMULA\s0.FORTRAN\fR,   and
performing some hand crafting of the result.
.PP
Information on \fB\s-1PROMULA\s0.FORTRAN\fR can be obtained from:
.PP
.Vb 4
\&                   PROMULA Development Corporation
\&                    3620 N. High Street, Suite 301
\&                         Columbus, Ohio 43214
\&                            (614) 263-5454
.Ve
\&\fIwrapper.c\fR  was created  by   using  \fB\s-1SWIG\s0\fR, and  performing   some
modification of the result.    \fB\s-1SWIG\s0\fR also produced the skeleton   of
\&\fIRandom.pm\fR.
.PP
Information on \fB\s-1SWIG\s0\fR can be obtained from:
.PP
.Vb 1
\&                 http://www.cs.utah.edu/~beazley/SWIG
.Ve
and
.PP
.Vb 1
\&                ftp://ftp.cs.utah.edu/pub/beazley/SWIG
.Ve
.SH "SOURCES"
.IX Header "SOURCES"
The following routines,  which  were  written by others   and  lightly
modified for consistency in packaging, are included in \fBrandlib\fR.
.Ip "Bottom Level Routines" 4
.IX Item "Bottom Level Routines"
These routines are a transliteration of the \fBPascal\fR in the reference
to \fBFortran\fR, and thence to \fBC\fR.
.Sp
L'Ecuyer, P., and Cote, S. \*(L"Implementing  a Random Number Package with
Splitting  Facilities.\*(R"  \s-1ACM\s0  Transactions   on Mathematical Software,
17:98\-111 (1991).
.Ip "Exponential" 4
.IX Item "Exponential"
This code was obtained from Netlib.
.Sp
Ahrens, J. H., and Dieter, U.  \*(L"Computer Methods for Sampling from the
Exponential and Normal  Distributions.\*(R"  Comm. \s-1ACM\s0, 15,10 (Oct. 1972),
873\-882.
.Ip "Gamma" 4
.IX Item "Gamma"
(Case R >= 1.0)                                          
.Sp
Ahrens, J. H., and Dieter, U. \*(L"Generating Gamma Variates by a Modified
Rejection Technique.\*(R"  Comm. \s-1ACM\s0, 25,1 (Jan. 1982), 47\-54.
Algorithm \s-1GD\s0                                                       
.Sp
(Case 0.0 <= R <= 1.0)                                   
.Sp
Ahrens, J. H.,  and  Dieter, U.  \*(L"Computer Methods  for Sampling  from
Gamma, Beta, Poisson and Binomial Distributions.\*(R"  Computing, 12 (1974),
223\-246.  Adaptation of algorithm \s-1GS\s0.
.Ip "Normal" 4
.IX Item "Normal"
This code was obtained from netlib.
.Sp
Ahrens, J. H., and  Dieter, U.   \*(L"Extensions of  Forsythe's Method for
Random Sampling  from the Normal Distribution.\*(R"  Math. Comput., 27,124
(Oct. 1973), 927\-937.
.Ip "Binomial" 4
.IX Item "Binomial"
This code was kindly sent to Dr. Brown by Dr. Kachitvichyanukul.
.Sp
Kachitvichyanukul, V., and Schmeiser,  B. W.  \*(L"Binomial Random Variate
Generation.\*(R"  Comm. \s-1ACM\s0, 31, 2 (Feb. 1988), 216.
.Ip "Poisson" 4
.IX Item "Poisson"
This code was obtained from netlib.
.Sp
Ahrens, J. H., and Dieter, U. \*(L"Computer Generation of Poisson Deviates
from Modified Normal Distributions.\*(R"  \s-1ACM\s0 Trans.  Math. Software, 8, 2
(June 1982), 163\-179.
.Ip "Beta" 4
.IX Item "Beta"
This code was written by us following the recipe in the following.
.Sp
Cheng, R. C. H.  \*(L"Generating  Beta Variables  with  Nonintegral  Shape
Parameters.\*(R"  Comm. \s-1ACM\s0, 21:317\-322 (1978). (Algorithms \s-1BB\s0 and \s-1BC\s0)
.Ip "Linpack" 4
.IX Item "Linpack"
Routines   \f(CW\*(C`SPOFA\*(C'\fR and  \f(CW\*(C`SDOT\*(C'\fR are  used    to perform  the Cholesky
decomposition of   the covariance matrix  in  \f(CW\*(C`SETGMN\*(C'\fR  (used for the
generation of multivariate normal deviates).
.Sp
Dongarra, J. J., Moler,   C.  B., Bunch, J.   R., and  Stewart, G.  W.
Linpack User's Guide.  \s-1SIAM\s0 Press, Philadelphia.  (1979)
.Ip "Multinomial" 4
.IX Item "Multinomial"
The  algorithm is from  page 559  of Devroye,  Luc Non-Uniform  Random
Variate Generation.  New York: Springer-Verlag, 1986.
.Ip "Negative Binomial" 4
.IX Item "Negative Binomial"
The  algorithm is from  page 480  of Devroye,  Luc Non-Uniform  Random
Variate Generation.  New York: Springer-Verlag, 1986.
.SH "VERSION"
.IX Header "VERSION"
This \s-1POD\s0 documents \fBMath::Random\fR version 0.66.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Ip "\(bu" 4
\&\fBMath::Random\fR (the \fBPerl\fR port  of \fBRandlib\fR) was put  together by
John Venier  and Barry W. Brown with help from  \fB\s-1SWIG\s0\fR.  For  version
0.61, Geoffrey Rommel made various cosmetic changes. Version 0.64 uses
plain vanilla \s-1XS\s0 rather than \s-1SWIG\s0.
.Ip "\(bu" 4
\&\fBrandlib\fR was compiled and written  by  Barry W. Brown, James Lovato,
Kathy Russell, and John Venier.
.Ip "\(bu" 4
Correspondence   regarding   \fBMath::Random\fR or   \fBrandlib\fR should be
addressed to John Venier by email to
.Sp
.Vb 1
\&                      venier@odin.mdacc.tmc.edu
.Ve
.Ip "\(bu" 4
Our address is:
.Sp
.Vb 4
\&                Department of Biomathematics, Box 237
\&         The University of Texas, M.D. Anderson Cancer Center
\&                       1515 Holcombe Boulevard
\&                          Houston, TX 77030
.Ve
.Ip "\(bu" 4
Geoffrey Rommel may be reached at grommel@cpan.org.
.SH "LEGALITIES"
.IX Header "LEGALITIES"
.Ip "\(bu" 4
The programs in the  \fBPerl\fR code distributed with \fBMath::Random\fR and
in    the \fBC\fR code \fIhelper.c\fR, as    well as  the documentation, are
copyright by John  Venier and  Barry  W.  Brown for the  University of
Texas M.  D.  Anderson Cancer Center in 1997.  They may be distributed
and used under the same conditions as \fBPerl\fR.
.Ip "\(bu" 4
\&\fIrandlib.c\fR,  \fIcom.c\fR,  and \fIrandlib.h\fR   are from  \fBrandlib\fR (See
the section on "RANDLIB") and are distributed with the following legalities:
.Sp
Code that appeared  in an    \s-1ACM\s0  publication  is subject  to    their
algorithms policy:
.Sp
Submittal of  an  algorithm    for publication  in   one of   the  \s-1ACM\s0
Transactions implies that unrestricted use  of the algorithm within  a
computer is permissible.   General permission  to copy and  distribute
the algorithm without fee is granted provided that the copies  are not
made  or   distributed for  direct   commercial  advantage.    The \s-1ACM\s0
copyright notice and the title of the publication and its date appear,
and  notice is given that copying  is by permission of the Association
for Computing Machinery.  To copy otherwise, or to republish, requires
a fee and/or specific permission.
.Sp
Krogh, F.  \*(L"Algorithms Policy.\*(R"  \s-1ACM\s0  Tran.  Math.  Softw.  13 (1987),
183\-186.
.Sp
Note, however, that only the particular expression of an algorithm can
be copyrighted, not the algorithm per se; see 17 \s-1USC\s0 102.
.Sp
We place the Randlib code that we have written in the public domain.  
.Ip "\(bu" 4
\&\fBMath::Randlib\fR and \fBrandlib\fR  are distributed  with \fB\s-1NO\s0 \s-1WARRANTY\s0\fR.
See the section on "NO WARRANTY".
.SH "NO WARRANTY"
.IX Header "NO WARRANTY"
\&\s-1WE\s0 \s-1PROVIDE\s0  \s-1ABSOLUTELY\s0  \s-1NO\s0 \s-1WARRANTY\s0  \s-1OF\s0 \s-1ANY\s0  \s-1KIND\s0  \s-1EITHER\s0  \s-1EXPRESS\s0  \s-1OR\s0
\&\s-1IMPLIED\s0,  \s-1INCLUDING\s0 \s-1BUT\s0   \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0,  \s-1THE\s0  \s-1IMPLIED\s0  \s-1WARRANTIES\s0 \s-1OF\s0
\&\s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  \s-1THE\s0 \s-1ENTIRE\s0 \s-1RISK\s0
\&\s-1AS\s0 \s-1TO\s0 \s-1THE\s0 \s-1QUALITY\s0 \s-1AND\s0 \s-1PERFORMANCE\s0 \s-1OF\s0 \s-1THE\s0 \s-1PROGRAM\s0 \s-1IS\s0  \s-1WITH\s0 \s-1YOU\s0.  \s-1SHOULD\s0
\&\s-1THIS\s0 \s-1PROGRAM\s0 \s-1PROVE\s0  \s-1DEFECTIVE\s0, \s-1YOU\s0 \s-1ASSUME\s0  \s-1THE\s0 \s-1COST\s0  \s-1OF\s0  \s-1ALL\s0 \s-1NECESSARY\s0
\&\s-1SERVICING\s0, \s-1REPAIR\s0 \s-1OR\s0 \s-1CORRECTION\s0.
.PP
\&\s-1IN\s0 \s-1NO\s0  \s-1EVENT\s0  \s-1SHALL\s0 \s-1THE\s0 \s-1UNIVERSITY\s0  \s-1OF\s0 \s-1TEXAS\s0 \s-1OR\s0  \s-1ANY\s0  \s-1OF\s0 \s-1ITS\s0 \s-1COMPONENT\s0
\&\s-1INSTITUTIONS\s0 \s-1INCLUDING\s0 M. D.   \s-1ANDERSON\s0 \s-1HOSPITAL\s0 \s-1BE\s0 \s-1LIABLE\s0  \s-1TO\s0 \s-1YOU\s0 \s-1FOR\s0
\&\s-1DAMAGES\s0, \s-1INCLUDING\s0 \s-1ANY\s0  \s-1LOST\s0 \s-1PROFITS\s0, \s-1LOST\s0 \s-1MONIES\s0,   \s-1OR\s0 \s-1OTHER\s0 \s-1SPECIAL\s0,
\&\s-1INCIDENTAL\s0   \s-1OR\s0  \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0   \s-1ARISING\s0   \s-1OUT\s0  \s-1OF\s0  \s-1THE\s0 \s-1USE\s0 \s-1OR\s0
\&\s-1INABILITY\s0 \s-1TO\s0 \s-1USE\s0 (\s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1LOSS\s0 \s-1OF\s0 \s-1DATA\s0 \s-1OR\s0 \s-1DATA\s0 \s-1OR\s0
\&\s-1ITS\s0 \s-1ANALYSIS\s0 \s-1BEING\s0  \s-1RENDERED\s0 \s-1INACCURATE\s0 \s-1OR\s0  \s-1LOSSES\s0 \s-1SUSTAINED\s0  \s-1BY\s0 \s-1THIRD\s0
\&\s-1PARTIES\s0 \s-1FROM\s0) \s-1THE\s0 \s-1PROGRAM\s0.
.PP
(Above \s-1NO\s0 \s-1WARRANTY\s0 modified from the \s-1GNU\s0 \s-1NO\s0 \s-1WARRANTY\s0 statement.)
