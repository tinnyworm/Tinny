#ifndef ENGERR_D
#define ENGERR_D

#include "engerr.h"

errStruct errOutSeverity[] = {
{ FATAL_ENGINE,                     "FATAL_ENGINE",                     TRUE },
{ FAIL_ENGINE,                      "FAIL_ENGINE",                      TRUE },
{ WARN_ENGINE,                      "WARN_ENGINE",                      TRUE },
{ INFORM_ENGINE,                    "INFORM_ENGINE",                    TRUE },
{ (-99),                            "",                                 TRUE }
};

errStruct errOutClass[] = {
{ LEX_RULE,                         "LEX_RULE",                         TRUE },
{ PARSE_EXPR,                       "PARSE_EXPR",                       TRUE },
{ PARSE_FUNC,                       "PARSE_FUNC",                       TRUE },
{ PARSE_SET,                        "PARSE_SET",                        TRUE },
{ PARSE_STATMNT,                    "PARSE_STATMNT",                    TRUE },
{ PARSE_STATMNT_LST,                "PARSE_STATMNT_LST",                TRUE },
{ PARSE_ELSE,                       "PARSE_ELSE",                       TRUE },
{ PARSE_IF,                         "PARSE_IF",                         TRUE },
{ PARSE_IN,                         "PARSE_IN",                         TRUE },
{ PARSE_RULE,                       "PARSE_RULE",                       TRUE },
{ PARSE_RULE_CALL,                  "PARSE_RULE_CALL",                  TRUE },
{ PARSE_RETURN,                     "PARSE_RETURN",                     TRUE },
{ PARSE_LOCVARS,                    "PARSE_LOCVARS",                    TRUE },
{ PARSE_RULE_BASE,                  "PARSE_RULE_BASE",                  TRUE },
{ PARSE_CASE,                       "PARSE_CASE",                       TRUE },
{ PARSE_WHILE,                      "PARSE_WHILE",                      TRUE },
{ PARSE_FOR,                        "PARSE_FOR",                        TRUE },
{ PARSE_LOCTYPE,                    "PARSE_LOCTYPE",                    TRUE },
{ PARSE_LOCVAR,                     "PARSE_LOCVAR",                     TRUE },
{ PARSE_LOCCONST,                   "PARSE_LOCCONST",                   TRUE },
{ CREATE_TMPVAR,                    "CREATE_TMPVAR",                    TRUE },
{ PARSE_RECORD,                     "PARSE_RECORD",                     TRUE },
{ PARSE_TERMINATE,                  "PARSE_TERMINATE",                  TRUE },
{ CREAT_RB,                         "CREAT_RB",                         TRUE },
{ PARSE_RB,                         "PARSE_RB",                         TRUE },
{ CREATE_TABLE,                     "CREATE_TABLE",                     TRUE },
{ RUN_SUPPORT_FUNC,                 "RUN_SUPPORT_FUNC",                 TRUE },
{ RUN_CALC_TABLE,                   "RUN_CALC_TABLE",                   TRUE },
{ EXEC_RB,                          "EXEC_RB",                          TRUE },
{ FREE_RB,                          "FREE_RB",                          TRUE },
{ EVAL_ATOM,                        "EVAL_ATOM",                        TRUE },
{ CALC_NODE,                        "CALC_NODE",                        TRUE },
{ GET_MEMORY,                       "GET_MEMORY",                       TRUE },
{ (-99),                            "",                                 TRUE }
};

errStruct errOutLow[] = {
{ UNKNWN_CHAR,                      "UNKNWN_CHAR",                      TRUE },
{ UNMTCH_DQUOTE,                    "UNMTCH_DQUOTE",                    TRUE },
{ TOO_MANY_DOTS,                    "TOO_MANY_DOTS",                    TRUE },
{ UNMTCH_SQUOTE,                    "UNMTCH_SQUOTE",                    TRUE },
{ UNMTCH_RPAREN,                    "UNMTCH_RPAREN",                    TRUE },
{ UNMTCH_LPAREN,                    "UNMTCH_LPAREN",                    TRUE },
{ UNEXPCT_KEYWD,                    "UNEXPCT_KEYWD",                    TRUE },
{ OPERATR_EXPCT,                    "OPERATR_EXPCT",                    TRUE },
{ EARLY_TERM,                       "EARLY_TERM",                       TRUE },
{ OPERAND_EXPCT,                    "OPERAND_EXPCT",                    TRUE },
{ BAD_STATMNT,                      "BAD_STATMNT",                      TRUE },
{ EMPTY_STATMNT,                    "EMPTY_STATMNT",                    TRUE },
{ UNMTCH_BEGIN,                     "UNMTCH_BEGIN",                     TRUE },
{ UNMTCH_END,                       "UNMTCH_END",                       TRUE },
{ SYNTX_ERR,                        "SYNTX_ERR",                        TRUE },
{ IF_NO_THEN,                       "IF_NO_THEN",                       TRUE },
{ IGNORE_AFTER_LINE,                "IGNORE_AFTER_LINE",                TRUE },
{ IGNORE_AFTER_TOK,                 "IGNORE_AFTER_TOK",                 TRUE },
{ RULE_NOT_FOUND,                   "RULE_NOT_FOUND",                   TRUE },
{ FUNC_NOT_FOUND,                   "FUNC_NOT_FOUND",                   TRUE },
{ BAD_STRING_OP,                    "BAD_STRING_OP",                    TRUE },
{ CANT_NEG_STR,                     "CANT_NEG_STR",                     TRUE },
{ OUT_OF_MEMORY,                    "OUT_OF_MEMORY",                    TRUE },
{ BAD_NUM_PARMS,                    "BAD_NUM_PARMS",                    TRUE },
{ PARAM_NOT_REF,                    "PARAM_NOT_REF",                    TRUE },
{ ILLEGAL_LVALUE,                   "ILLEGAL_LVALUE",                   TRUE },
{ SET_READ_ONLY_TMPLT,              "SET_READ_ONLY_TMPLT",              TRUE },
{ SET_READ_ONLY_FLD,                "SET_READ_ONLY_FLD",                TRUE },
{ REF_READ_ONLY_TMPLT,              "REF_READ_ONLY_TMPLT",              TRUE },
{ REF_READ_ONLY_FLD,                "REF_READ_ONLY_FLD",                TRUE },
{ ILLEGAL_IN,                       "ILLEGAL_IN",                       TRUE },
{ EQUAL_NOT_SET,                    "EQUAL_NOT_SET",                    TRUE },
{ EXPR_NO_FUNCTION,                 "EXPR_NO_FUNCTION",                 TRUE },
{ TYPE_MISMATCH_DT,                 "TYPE_MISMATCH_DT",                 TRUE },
{ TYPE_MISMATCH_DN,                 "TYPE_MISMATCH_DN",                 TRUE },
{ TYPE_MISMATCH_DS,                 "TYPE_MISMATCH_DS",                 TRUE },
{ TYPE_MISMATCH_TD,                 "TYPE_MISMATCH_TD",                 TRUE },
{ TYPE_MISMATCH_TN,                 "TYPE_MISMATCH_TN",                 TRUE },
{ TYPE_MISMATCH_TS,                 "TYPE_MISMATCH_TS",                 TRUE },
{ TYPE_MISMATCH_ND,                 "TYPE_MISMATCH_ND",                 TRUE },
{ TYPE_MISMATCH_NT,                 "TYPE_MISMATCH_NT",                 TRUE },
{ TYPE_MISMATCH_NS,                 "TYPE_MISMATCH_NS",                 TRUE },
{ TYPE_MISMATCH_SN,                 "TYPE_MISMATCH_SN",                 TRUE },
{ TYPE_MISMATCH_DNONE,              "TYPE_MISMATCH_DNONE",              TRUE },
{ TYPE_MISMATCH_TNONE,              "TYPE_MISMATCH_TNONE",              TRUE },
{ TYPE_MISMATCH_NNONE,              "TYPE_MISMATCH_NNONE",              TRUE },
{ TYPE_MISMATCH_SNONE,              "TYPE_MISMATCH_SNONE",              TRUE },
{ TYPE_MISMATCH_NONE,               "TYPE_MISMATCH_NONE",               TRUE },
{ SET_PARAMETER,                    "SET_PARAMETER",                    TRUE },
{ NOT_STRING,                       "NOT_STRING",                       TRUE },
{ BAD_VARDEF_TOK,                   "BAD_VARDEF_TOK",                   TRUE },
{ VAR_EXISTS_PARAM,                 "VAR_EXISTS_PARAM",                 TRUE },
{ MISSING_COLON,                    "MISSING_COLON",                    TRUE },
{ MISSING_SEMI_COLON,               "MISSING_SEMI_COLON",               TRUE },
{ BAD_VAR_TYPE,                     "BAD_VAR_TYPE",                     TRUE },
{ EMPTY_BLOCK,                      "EMPTY_BLOCK",                      TRUE },
{ DUP_RULE,                         "DUP_RULE",                         TRUE },
{ NO_RETURN,                        "NO_RETURN",                        TRUE },
{ CASE_NO_OF,                       "CASE_NO_OF",                       TRUE },
{ CASE_NOT_NUMERIC,                 "CASE_NOT_NUMERIC",                 TRUE },
{ CASE_NOT_STRING,                  "CASE_NOT_STRING",                  TRUE },
{ BAD_CASE_TOK,                     "BAD_CASE_TOK",                     TRUE },
{ CASE_NO_END,                      "CASE_NO_END",                      TRUE },
{ FOR_USE_EQL,                      "FOR_USE_EQL",                      TRUE },
{ FOR_BAD_INIT,                     "FOR_BAD_INIT",                     TRUE },
{ FOR_NOT_NUMERIC,                  "FOR_NOT_NUMERIC",                  TRUE },
{ MISSING_TO,                       "MISSING_TO",                       TRUE },
{ FOR_NO_DO,                        "FOR_NO_DO",                        TRUE },
{ WHILE_NO_DO,                      "WHILE_NO_DO",                      TRUE },
{ TYPE_EXISTS_TMPLT,                "TYPE_EXISTS_TMPLT",                TRUE },
{ VAR_EXISTS_TMPLT,                 "VAR_EXISTS_TMPLT",                 TRUE },
{ FLD_EXISTS,                       "FLD_EXISTS",                       TRUE },
{ BAD_REC_TERM,                     "BAD_REC_TERM",                     TRUE },
{ BAD_FLD_TYPE,                     "BAD_FLD_TYPE",                     TRUE },
{ TYPE_DEF_USE_EQUAL,               "TYPE_DEF_USE_EQUAL",               TRUE },
{ MISSING_SET,                      "MISSING_SET",                      TRUE },
{ TYPE_EXISTS_LOCTYPE,              "TYPE_EXISTS_LOCTYPE",              TRUE },
{ TYPE_EXISTS_GLOBTYPE,             "TYPE_EXISTS_GLOBTYPE",             TRUE },
{ CONST_DEF_USE_EQUAL,              "CONST_DEF_USE_EQUAL",              TRUE },
{ CONST_EXISTS_PARAM,               "CONST_EXISTS_PARAM",               TRUE },
{ CONST_EXISTS_LOCCONST,            "CONST_EXISTS_LOCCONST",            TRUE },
{ CONST_EXISTS_LOCVAR,              "CONST_EXISTS_LOCVAR",              TRUE },
{ CONST_EXISTS_GLOBCONST,           "CONST_EXISTS_GLOBCONST",           TRUE },
{ CONST_EXISTS_GLOBVAR,             "CONST_EXISTS_GLOBVAR",             TRUE },
{ BAD_CONST_VALUE,                  "BAD_CONST_VALUE",                  TRUE },
{ VAR_EXISTS_LOCCONST,              "VAR_EXISTS_LOCCONST",              TRUE },
{ VAR_EXISTS_LOCVAR,                "VAR_EXISTS_LOCVAR",                TRUE },
{ VAR_EXISTS_GLOBCONST,             "VAR_EXISTS_GLOBCONST",             TRUE },
{ VAR_EXISTS_GLOBVAR,               "VAR_EXISTS_GLOBVAR",               TRUE },
{ BAD_STRLEN,                       "BAD_STRLEN",                       TRUE },
{ STRLEN_NO_END,                    "STRLEN_NO_END",                    TRUE },
{ VAR_NOT_FOUND,                    "VAR_NOT_FOUND",                    TRUE },
{ FLD_NOT_FOUND,                    "FLD_NOT_FOUND",                    TRUE },
{ FLD_NOT_RECORD,                   "FLD_NOT_RECORD",                   TRUE },
{ PARAM_NOT_RECORD,                 "PARAM_NOT_RECORD",                 TRUE },
{ VAR_NOT_RECORD,                   "VAR_NOT_RECORD",                   TRUE },
{ RECORD_NOT_DEFINED,               "RECORD_NOT_DEFINED",               TRUE },
{ SET_RECMISMATCH,                  "SET_RECMISMATCH",                  TRUE },
{ BAD_RECORD_OP,                    "BAD_RECORD_OP",                    TRUE },
{ BAD_TYPE,                         "BAD_TYPE",                         TRUE },
{ BAD_CASE_TYPE,                    "BAD_CASE_TYPE",                    TRUE },
{ CASE_VAL_DUP,                     "CASE_VAL_DUP",                     TRUE },
{ CANT_MOD_LOOPVAR,                 "CANT_MOD_LOOPVAR",                 TRUE },
{ LOOP_NOTVAR,                      "LOOP_NOTVAR",                      TRUE },
{ TERM_NOT_NUMERIC,                 "TERM_NOT_NUMERIC",                 TRUE },
{ INFINITE_FOR,                     "INFINITE_FOR",                     TRUE },
{ FOR_ZERO_STEP,                    "FOR_ZERO_STEP",                    TRUE },
{ EMPTY_CASE,                       "EMPTY_CASE",                       TRUE },
{ BAD_WHILE_LIMIT,                  "BAD_WHILE_LIMIT",                  TRUE },
{ BAD_STATEMENT_TYPE,               "BAD_STATEMENT_TYPE",               TRUE },
{ UNKNOWN_OPERATOR,                 "UNKNOWN_OPERATOR",                 TRUE },
{ NO_CALC_TABLE,                    "NO_CALC_TABLE",                    TRUE },
{ FUNCTION_FAILED,                  "FUNCTION_FAILED",                  TRUE },
{ BAD_ATOM_TYPE,                    "BAD_ATOM_TYPE",                    TRUE },
{ UNKNOWN_BLTIN,                    "UNKNOWN_BLTIN",                    TRUE },
{ MEM_POOL_EXCEEDED,                "MEM_POOL_EXCEEDED",                TRUE },
{ NO_EVAL_RULES,                    "NO_EVAL_RULES",                    TRUE },
{ RULE_PARAM_MISMTCH,               "RULE_PARAM_MISMTCH",               TRUE },
{ WHILE_LIMIT_HIT,                  "WHILE_LIMIT_HIT",                  TRUE },
{ (-99),                            "",                                 TRUE }
};

#endif
