
- falconer4-1.2.2 version 1.2.2 is running with libraries:
   BUILDAPI version 1.3.1
   FILE_IO  version 0.7.6

falconer4-1.2.2 - Falconer 4.0 model development tool version 1.2.2 

   This program assist building Falcon models on the Rule Engine
   3.0 by providing support for scaling operations, and various
   of model evaluation and scoring

falconer4-1.2.2 [options] model_configuration_file

Argument:
   model_configuration_file - The rule base file typically ends with
       a .cnf extension.  This file names the model parts and template.

Options:
   -a api_file - Read API formatted data from file api_file.
   -A api_file - Write API formatted data to file api_file.

   -b big_score - Write a big score file to file big_score.

   -d - data modification options:
      acctlen=value - Overrides the default value for account number
           length for comparing and creating short score file. It
           does NOT affect size of account number field in the API.
      std_kchk - standardize KCHK 0003 and 0004 to 0004
      defaultcard - use default card data for records missing
           card file entries
      buildcard30 - generate/select card records the like
           drvfalcon30u does

   -D level - Turn debug reporting on. 1 High level to 3 lowest.

   -e number - explain threshold (0 to 1000), defaults to 1000

   -f - global filtering options (only valid with -i):
        Note: cash, kchk, and mrch are mutually exclusive
      cash - Only cash transactions and not SIC 0003 are trained
           or scored.  All others are profiled.
      kchk - Only K tran type, or SIC 0003 or 0004 are trained
           or scored.  All others are profiled.
      mrch - Only M tran type and not SIC 0004 are trained
           or scored.  All others are profiled.

      nocash - Cash trans that are not SIC 0003 are not processed.
      nokchk - Kchk tran type, SIC 003, or SIC 0004 are not processed.
      nomrch - M tran type and not SIC 0004 are not processed.

      NOTE: the next two are mutually exclusive
      keyed - Keyed trans are trained or scored.
              All others are profiled.
      nokeyed - Non keyed trans are trained or scored.
              Keyed trans are profiled.

      amountGE=value - Transactions with amounts greater than or
              equal to the value will be scored.
              All others are profiled.
      amountLT=value - Transactions with amounts less than the value
              will be scored. All others are profiled.
      sic=value (or range1-range2) - Transactions matching the SIC codes
              will be scored, all other transactions profiled.
      nosic=value (or range1-range2) - Transactions matching the SIC codes
              will be profiled, and all others will be scored.

      fraudsonly - only transactions from fraud accounts will be
              considered for processing

      noauths - do not process auth files
      noposts - do not process post files
      nononmons - do not process nonmon files
      nopayments - do not process payment files

   -h - help information.

   -i dir=dir_name,select=select_file_name specifies the directory
        select file pair to be used.  -i can be specified more than once
        to use multiple directories in the job. Note: no spaces are
        between the equal signs or the comma in this specification
      dir_name - is name of the directory to locate the input data
      select_file_name - is the name of the select file to use with this
          dir_name.  Use a select_file_name of 'none' to get defaults

   -n number - Maximum number of transactions to score/scale

   -p options:
      storeprofile - store profiles in memory to support date/time order
          processing
      mp=number - store merchant profiles at the end of card/acct profiles in
          memory.  The number is the total number of bytes of merchant
          profile variables to processed.  Each profile variable is
          expected to be 20 bytes long
          Ex. mp=40, would mean 2 merchant profile variables of
              bytes each taking a total of 40 bytes
      printprofile=file - Print the profiles to the file file
          at the end of the job.  requires -p store profile option
          to be specified.  The .gz file extension is not supported
          in this suboption.

   -r file=research_file, full, f or brief, b - Write research report to file
        research_file in either full or brief format.  Defaults to full
      -r file=res.txt,full  will create full formatted report
      -r file-res.txt,b     will create brief formatted report
      otX=value - open to buy override of default settings, based on 
                  fraud type (X). Supported fraud types are:
      ota=value - Value to use for fraud type A calculations
      otc=value - Value to use for fraud type C calculations
      otg=value - Value to use for fraud type G calculations
      otl=value - Value to use for fraud type L calculations
      otm=value - Value to use for fraud type M calculations
      otn=value - Value to use for fraud type N calculations
      ots=value - Value to use for fraud type S calculations
      ott=value - Value to use for fraud type T calculations
      other=value - Value to use for all other fraud types

   -R - falconer4 run time control options:
      flushSTDOUT - flush the stdout buffer for each record.
      reject - create the reject file.
      silent - do not report RE transaction errors.
          Initialization and fatal errors are still reported.

   -s short_score - Write a short score type file to short_score.
   -S scoring options that affect what transactions are output
      scoreall - all transactions that pass filtering criteria will
            be scored, i.e. all transactions marked for profiling
            will be scored instead.
      scoreprefraud - all transactions from a fraud acct that are
            marked to be profiled will be scored instead.
      These options along with the filtering option fraudsonly can
      have a profound affect what transactions are scored (reported
      on by a score or output to a scale file).

   -t threshold=value,test or train - Specify the threshold value to 
        reserve data for testing, the remainder will be reserved for
        training.  The optional test and train suboptions restrict
        processing to only those accounts that fall into the test bin
        or the train bin.
        If threshold is not specified, it defaults to 25% test, 75% train.
      -t threshold=30       will reserve 30% for testing, 70% for training
      -t threshold=45,test  will reserve 45% for testing only scoring those
         accounts in the test bin
      -t threshold=25,train will reserve 25% for testing only scoring those
         accounts in the 75% training bin

   -v Print version information and exit

   -z options -  Perform Z scaling of the input data into file cnf_file_prefix.scl
      scale options:
      scl - produce the .scl file, .cfg, .tag
      dat - produce .dat and .scl, .cfg, .tag
      nozerocalc - Don't include zero values in means and std
            deviation calculations
      binary - detect and process binary input variables differently.

Notes:
   gzip and gunzip must be in your path

Examples:
   Ex Scaling:
   falconer4 -i dir=data_directory,select=select.muse -z scl model.cnf
   falconer4 -i dir=../data,select=select.mgen -t train -z scl model.cnf
   falconer4 -f cash,nomrch -idir=../data,select=select.mgen -z scl,binary,nozerocalc model.cnf

   Ex Evaluation:
   falconer4 -a api_file -s scr_file -e0 model.cnf
   falconer4 -a input_api -s scr_file -A output_api -e0 model.cnf
   falconer4 -i dir=data_directory,select=select.muse -s scr_file -S scoreall model.cnf
