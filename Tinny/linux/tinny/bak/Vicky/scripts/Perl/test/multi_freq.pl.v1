#! /usr/local/bin/perl 

$usage = "\nUsage: multi_freq.pl [ -f filename,field_1 start-end,field_2 start-end,...:<filename,field_1 start-end,field_2 start-end,...> ]"
         . "                         [ -h ] \n"
         . " where:\n"
         . "    -h    :   show this message\n\n"
	 . " Note:   1) Please do not leave any blank within the option content. \n\n"
	 . "example:    multi_freq.pl -f  auths.dat.gz,1-6,20-25:cards.dat.gz,1-6,91-96 \n\n";

require "getopts.pl";

&Getopts('f:h');
$file=$opt_f;

die "$usage" unless $opt_f ;
use Data::Dumper;
$Data::Dumper::Purity=1;
#### split the file array
@splitfile=split(/:/, $file);

for ($i = 0; $i < @splitfile; $i ++) {
    @tmp=split(/,/, $splitfile[$i]);
    $field[$i][0]=$tmp[0];
    for ($j = 1; $j < @tmp; $j ++){
        if ( $tmp[$j] =~ /(\d+)-(\d+)/ ) {
	   $field[$i][$j+$j-1]= $1 -1;
	   $field[$i][$j+$j] = $2 - $1 + 1;
           die "Bad column specification\n" if $field[$i][$j+$j] < 0 || $field[$i][$j+$j-1]< 0;
          } else {
  	   die "Bad column specification\n";
          }
     }
}


for ($i=0; $i<@splitfile; $i ++) {
   open (TEMP, "/usr/local/bin/zcat $field[$i][0] |") || die ("Couldn't open $field[$i][0]\n");
      while (<TEMP>){
      $hashkey="";
          for ($j = 1; $j < @tmp; $j ++){
              $tmp1=substr($_,$field[$i][$j+$j-1],$field[$i][$j+$j]);
              $hashkey=$tmp1 . ":" . $hashkey  ;
           }
	   $hashkey=join(":", reverse split(":", $hashkey)) . ":";
	   
#	  $hashkey= $field[$i][0] . $hashkey ;
#         ($fieldHash{$hashkey} ++) or ($fieldHash{$hashkey}=1);
         ($fieldHash[$i]{$hashkey} ++) or ($fieldHash[$i]{$hashkey}=1);
       } 
     close(TEMP);
}

for ($i=0; $i<@splitfile; $i ++) {
#    $field[$i][0] =~ s/[/]/_/;
    open (SAVE, "> ./hash.$field[$i][0].save") || die "Couldn't open hash.$field[$i][0].save:$!";
#    sort {$fieldHash[$i]{$b} <=> $fieldHash[$i]{$a}} keys %{ $fieldHash[$i]};
   print SAVE Data::Dumper->Dump([\%{ $fieldHash[$i]}], ['*{ $fieldHash[$i]}']);
    close SAVE   || die "Couldn't close hash.$field[$i][0].save:$!";}
#   open (OUT, "> ./hash.$field[$i][0].save") || die "Couldn't open hash.$field[$i][0].save:$!";
    #print SAVE Data::Dumper->Dump([\%fieldHash], ['*fieldHash']);
#    close SAVE   || die "Couldn't close hash.$field[$i][0].save:$!";
#write $field[$i][0].list\n");
#      foreach $key (sort {$a cmp $b} keys %{ $fieldHash[$i]} ) {
#              $ratio[$i]=sprintf("%.2f", 100*$fieldHash[$i]{$key}/$count);
#              print OUT ( $key, ":",$fieldHash[$i]{$key}, ":","$ratio[$i]\n"); 
#           print OUT ( $key, ":", "$fieldHash[$i]{$key}\n");
#      }
#    close(OUT);
#}
