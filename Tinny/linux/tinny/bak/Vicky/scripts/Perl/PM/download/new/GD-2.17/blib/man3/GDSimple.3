.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GD::Simple 3"
.TH GD::Simple 3 "2002-07-30" "perl v5.8.2" "User Contributed Perl Documentation"
.SH "NAME"
GD::Simple \- Simplified interface to GD library
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use GD::Simple;
.Ve
.PP
.Vb 2
\&    # create a new image
\&    $im = GD::Simple->new(400,250);
.Ve
.PP
.Vb 4
\&    # draw a red rectangle with blue borders
\&    $img->bgcolor('red');
\&    $img->fgcolor('blue');
\&    $img->rectangle(10,10,50,50);
.Ve
.PP
.Vb 4
\&    # draw an empty rectangle with green borders
\&    $img->bgcolor(undef);
\&    $img->fgcolor('green');
\&    $img->rectangle(30,30,100,100);
.Ve
.PP
.Vb 3
\&    # move to (80,80) and draw a green line to (100,190)
\&    $img->moveTo(80,80);
\&    $img->lineTo(100,190);
.Ve
.PP
.Vb 5
\&    # draw a solid orange ellipse
\&    $img->moveTo(110,100);
\&    $img->bgcolor('orange');
\&    $img->fgcolor('orange');
\&    $img->ellipse(40,40);
.Ve
.PP
.Vb 4
\&    # draw a black filled arc
\&    $img->moveTo(150,150);
\&    $img->fgcolor('black');
\&    $img->arc(50,50,0,100,gdNoFill|gdEdged);
.Ve
.PP
.Vb 4
\&    # draw a string at (10,180) using the default
\&    # built-in font
\&    $img->moveTo(10,180);
\&    $img->string('This is very simple');
.Ve
.PP
.Vb 7
\&    # draw a string at (280,210) using 20 point
\&    # times italic, angled upward 90 degrees
\&    $img->moveTo(280,210);
\&    $img->font('Times:italic');
\&    $img->fontsize(20);
\&    $img->angle(-90);
\&    $img->string('This is very fancy');
.Ve
.PP
.Vb 11
\&    # some turtle graphics
\&    $img->moveTo(300,100);
\&    $img->penSize(3,3);
\&    $img->angle(0);
\&    $img->line(20);   # 20 pixels going to the right
\&    $img->turn(30);   # set turning angle to 30 degrees
\&    $img->line(20);   # 20 pixel line
\&    $img->line(20);
\&    $img->line(20);
\&    $img->turn(-90); # set turning angle to -90 degrees
\&    $img->line(50);  # 50 pixel line
.Ve
.PP
.Vb 9
\&    # draw a cyan polygon edged in blue
\&    my $poly = new GD::Polygon;
\&    $poly->addPt(150,100);
\&    $poly->addPt(199,199);
\&    $poly->addPt(100,199);
\&    $img->bgcolor('cyan');
\&    $img->fgcolor('blue');
\&    $img->penSize(1,1);
\&    $img->polygon($poly);
.Ve
.PP
.Vb 2
\&   # convert into png data
\&   print $img->png;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
GD::Simple is a subclass of the \s-1GD\s0 library that shortens many of the
long \s-1GD\s0 method calls by storing information about the pen color, size
and position in the \s-1GD\s0 object itself.  It also adds a small number of
\&\*(L"turtle graphics\*(R" style calls for those who prefer to work in polar
coordinates.  In addition, the library allows you to use symbolic
names for colors, such as \*(L"chartreuse\*(R", and will manage the colors for
you.
.Sh "The Pen"
.IX Subsection "The Pen"
GD::Simple maintains a \*(L"pen\*(R" whose settings are used for line\- and
shape-drawing operations.  The pen has the following properties:
.IP "fgcolor" 4
.IX Item "fgcolor"
The pen foreground color is the color of lines and the borders of
filled and unfilled shapes.
.IP "bgcolor" 4
.IX Item "bgcolor"
The pen background color is the color of the contents of filled
shapes.
.IP "pensize" 4
.IX Item "pensize"
The pen size is the width of the pen.  Larger sizes draw thicker
lines.
.IP "position" 4
.IX Item "position"
The pen position is its current position on the canvas in (X,Y)
coordinates.
.IP "angle" 4
.IX Item "angle"
When drawing in turtle mode, the pen angle determines the current
direction of lines of relative length.
.IP "turn" 4
.IX Item "turn"
When drawing in turtle mode, the turn determines the clockwise or
counterclockwise angle that the pen will turn before drawing the next
line.
.IP "font" 4
.IX Item "font"
The font to use when drawing text.  Both built-in bitmapped fonts and
TrueType fonts are supported.
.IP "fontsize" 4
.IX Item "fontsize"
The size of the font to use when drawing with TrueType fonts.
.PP
One sets the position and properties of the pen and then draws.  As
the drawing progresses, the position of the pen is updated.
.Sh "Methods"
.IX Subsection "Methods"
GD::Simple introduces a number of new methods, a few of which have the
same name as GD::Image methods, and hence change their behavior. In
addition to these new methods, GD::Simple objects support all of the
GD::Image methods. If you make a method call that isn't directly
supported by GD::Simple, it refers the request to the underlying
GD::Image object.  Hence one can load a \s-1JPEG\s0 image into GD::Simple and
declare it to be TrueColor by using this call, which is effectively
inherited from GD::Image:
.PP
.Vb 1
\&  my $img = GD::Simple->newFromJpeg('./myimage.jpg',1);
.Ve
.PP
The rest of this section describes GD::Simple\-specific methods.
.IP "$img\->moveTo($x,$y)" 4
.IX Item "$img->moveTo($x,$y)"
This call changes the position of the pen without drawing. It moves
the pen to position ($x,$y) on the drawing canvas.
.IP "$img\->move($dx,$dy)" 4
.IX Item "$img->move($dx,$dy)"
.PD 0
.IP "$img\->move($dr)" 4
.IX Item "$img->move($dr)"
.PD
This call changes the position of the pen without drawing. When called
with two arguments it moves the pen \f(CW$dx\fR pixels to the right and \f(CW$dy\fR
pixels downward.  When called with one argument it moves the pen \f(CW$dr\fR
pixels along the vector described by the current pen angle.
.IP "$img\->lineTo($x,$y)" 4
.IX Item "$img->lineTo($x,$y)"
The \fIlineTo()\fR call simultaneously draws and moves the pen.  It draws a
line from the current pen position to the position defined by ($x,$y)
using the current pen size and color.  After drawing, the position of
the pen is updated to the new position.
.IP "$img\->line($dx,$dy)" 4
.IX Item "$img->line($dx,$dy)"
.PD 0
.IP "$img\->line($dr)" 4
.IX Item "$img->line($dr)"
.PD
The \fIline()\fR call simultaneously draws and moves the pen. When called
with two arguments it draws a line from the current position of the
pen to the position \f(CW$dx\fR pixels to the right and \f(CW$dy\fR pixels down.  When
called with one argument, it draws a line \f(CW$dr\fR pixels long along the
angle defined by the current pen angle.
.IP "$img\->clear" 4
.IX Item "$img->clear"
This method clears the canvas by painting over it with the current
background color.
.IP "$img\->rectangle($x1,$y1,$x2,$y2)" 4
.IX Item "$img->rectangle($x1,$y1,$x2,$y2)"
This method draws the rectangle defined by corners ($x1,$y1),
($x2,$y2). The rectangle's edges are drawn in the foreground color and
its contents are filled with the background color. To draw a solid
rectangle set bgcolor equal to fgcolor. To draw an unfilled rectangle
(transparent inside), set bgcolor to undef.
.IP "$img\->ellipse($cx,$cy,$width,$height)" 4
.IX Item "$img->ellipse($cx,$cy,$width,$height)"
This method draws the ellipse defined by center ($cx,$cy), width
\&\f(CW$width\fR and height \f(CW$height\fR.  The ellipse's border is drawn in the
foreground color and its contents are filled with the background
color. To draw a solid ellipse set bgcolor equal to fgcolor. To draw
an unfilled ellipse (transparent inside), set bgcolor to undef.
.IP "$img\->arc($cx,$cy,$width,$height,$start,$end [,$style])" 4
.IX Item "$img->arc($cx,$cy,$width,$height,$start,$end [,$style])"
This method draws filled and unfilled arcs.  See \s-1GD\s0 for a
description of the arguments. To draw a solid arc (such as a pie
wedge) set bgcolor equal to fgcolor. To draw an unfilled arc, set
bgcolor to undef.
.IP "$img\->polygon($poly)" 4
.IX Item "$img->polygon($poly)"
This method draws filled and unfilled polygon using the current
settings of fgcolor for the polygon border and bgcolor for the polygon
fill color.  See \s-1GD\s0 for a description of creating polygons. To draw
a solid polygon set bgcolor equal to fgcolor. To draw an unfilled
polygon, set bgcolor to undef.
.IP "$img\->string($string)" 4
.IX Item "$img->string($string)"
This method draws the indicated string starting at the current
position of the pen. The pen is \fBnot\fR moved.  Depending on the font
selected with the \fIfont()\fR method, this will use either a bitmapped \s-1GD\s0
font or a TrueType font.  The angle of the pen will be consulted when
drawing the text. For TrueType fonts, any angle is accepted.  For \s-1GD\s0
bitmapped fonts, the angle can be either 0 (draw horizontal) or \-90
(draw upwards).
.Sp
For consistency between the TrueType and \s-1GD\s0 font behavior, the string
is always drawn so that the current position of the pen corresponds to
the bottom left of the first character of the text.  This is different
from the \s-1GD\s0 behavior, in which the first character of bitmapped fonts
hangs down from the pen point.
.Sp
When rendering TrueType, this method returns an array indicating the
bounding box of the rendered text.  If an error occurred (such as
invalid font specification) it returns an empty list and an error
message in $@.
.ie n .IP "($x,$y) = $img\->curPos" 4
.el .IP "($x,$y) = \f(CW$img\fR\->curPos" 4
.IX Item "($x,$y) = $img->curPos"
Return the current position of the pen.  Set the current position
using \fImoveTo()\fR.
.ie n .IP "$font = $img\->font([$newfont])" 4
.el .IP "$font = \f(CW$img\fR\->font([$newfont])" 4
.IX Item "$font = $img->font([$newfont])"
Get or set the current font.  Fonts can be GD::Font objects, TrueType
font file paths, or fontconfig font patterns like \*(L"Times:italic\*(R" (see
fontconfig). The latter feature requires that you have the
fontconfig library installed and are using libgd version 2.0.33 or
higher.
.ie n .IP "$size = $img\->fontsize([$newfontsize])" 4
.el .IP "$size = \f(CW$img\fR\->fontsize([$newfontsize])" 4
.IX Item "$size = $img->fontsize([$newfontsize])"
Get or set the current font size.  This is only valid for TrueType
fonts.
.ie n .IP "$size = $img\->penSize([$newpensize])" 4
.el .IP "$size = \f(CW$img\fR\->penSize([$newpensize])" 4
.IX Item "$size = $img->penSize([$newpensize])"
Get or set the current pen width for use during line drawing
operations.
.ie n .IP "$angle = $img\->angle([$newangle])" 4
.el .IP "$angle = \f(CW$img\fR\->angle([$newangle])" 4
.IX Item "$angle = $img->angle([$newangle])"
Set the current angle for use when calling \fIline()\fR or \fImove()\fR with a
single argument. 
.Sp
Here is an example of using \fIturn()\fR and \fIangle()\fR together to draw an
octagon.  The first line drawn is the downward-slanting top right
edge.  The last line drawn is the horizontal top of the octagon.
.Sp
.Vb 4
\&  $img->moveTo(200,50);
\&  $img->angle(0);
\&  $img->turn(360/8);
\&  for (1..8) { $img->line(50) }
.Ve
.ie n .IP "$angle = $img\->turn([$newangle])" 4
.el .IP "$angle = \f(CW$img\fR\->turn([$newangle])" 4
.IX Item "$angle = $img->turn([$newangle])"
Get or set the current angle to turn prior to drawing lines.  This
value is only used when calling \fIline()\fR or \fImove()\fR with a single
argument.  The turning angle will be applied to each call to \fIline()\fR or
\&\fImove()\fR just before the actual drawing occurs.
.Sp
Angles are in degrees.  Positive values turn the angle clockwise.
.ie n .IP "$color = $img\->fgcolor([$newcolor])" 4
.el .IP "$color = \f(CW$img\fR\->fgcolor([$newcolor])" 4
.IX Item "$color = $img->fgcolor([$newcolor])"
Get or set the pen's foreground color.  The current pen color can be
set by (1) using an (r,g,b) triple; (2) using a previously-allocated
color from the \s-1GD\s0 palette; or (3) by using a symbolic color name such
as \*(L"chartreuse.\*(R"  The list of color names can be obtained using
\&\fIcolor_names()\fR.
.ie n .IP "$color = $img\->bgcolor([$newcolor])" 4
.el .IP "$color = \f(CW$img\fR\->bgcolor([$newcolor])" 4
.IX Item "$color = $img->bgcolor([$newcolor])"
Get or set the pen's background color.  The current pen color can be
set by (1) using an (r,g,b) triple; (2) using a previously-allocated
color from the \s-1GD\s0 palette; or (3) by using a symbolic color name such
as \*(L"chartreuse.\*(R"  The list of color names can be obtained using
\&\fIcolor_names()\fR.
.ie n .IP "$index = $img\->translate_color(@args)" 4
.el .IP "$index = \f(CW$img\fR\->translate_color(@args)" 4
.IX Item "$index = $img->translate_color(@args)"
Translates a color into a \s-1GD\s0 palette or TrueColor index.  You may pass
either an (r,g,b) triple or a symbolic color name. If you pass a
previously-allocated index, the method will return it unchanged.
.IP "@names = GD::Simple\->color_names" 4
.IX Item "@names = GD::Simple->color_names"
.PD 0
.IP "$translate_table = GD::Simple\->color_names" 4
.IX Item "$translate_table = GD::Simple->color_names"
.PD
Called in a list context, \fIcolor_names()\fR returns the list of symbolic
color names recognized by this module.  Called in a scalar context,
the method returns a hash reference in which the keys are the color
names and the values are array references containing [r,g,b] triples.
.ie n .IP "$gd = $img\->gd" 4
.el .IP "$gd = \f(CW$img\fR\->gd" 4
.IX Item "$gd = $img->gd"
Return the internal GD::Image object.  Usually you will not need to
call this since all \s-1GD\s0 methods are automatically referred to this object.
.SH "COLORS"
.IX Header "COLORS"
This script will create an image showing all the symbolic colors.
.PP
.Vb 1
\& #!/usr/bin/perl
.Ve
.PP
.Vb 2
\& use strict;
\& use GD::Simple;
.Ve
.PP
.Vb 3
\& my @color_names = GD::Simple->color_names;
\& my $cols = int(sqrt(@color_names));
\& my $rows = int(@color_names/$cols)+1;
.Ve
.PP
.Vb 5
\& my $cell_width    = 100;
\& my $cell_height   = 50;
\& my $legend_height = 16;
\& my $width       = $cols * $cell_width;
\& my $height      = $rows * $cell_height;
.Ve
.PP
.Vb 2
\& my $img = GD::Simple->new($width,$height);
\& $img->font(gdSmallFont);
.Ve
.PP
.Vb 13
\& for (my $c=0; $c<$cols; $c++) {
\&   for (my $r=0; $r<$rows; $r++) {
\&     my $color = $color_names[$c*$rows + $r] or next;
\&     my @topleft  = ($c*$cell_width,$r*$cell_height);
\&     my @botright = ($topleft[0]+$cell_width,$topleft[1]+$cell_height-$legend_height);
\&     $img->bgcolor($color);
\&     $img->fgcolor($color);
\&     $img->rectangle(@topleft,@botright);
\&     $img->moveTo($topleft[0]+2,$botright[1]+$legend_height-2);
\&     $img->fgcolor('black');
\&     $img->string($color);
\&   }
\& }
.Ve
.PP
.Vb 1
\& print $img->png;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
The GD::Simple module is copyright 2004, Lincoln D. Stein.  It is
distributed under the same terms as Perl itself.  See the \*(L"Artistic
License\*(R" in the Perl source code distribution for licensing terms.
.PP
The latest versions of \s-1GD\s0.pm are available at
.PP
.Vb 1
\&  http://stein.cshl.org/WWW/software/GD
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1GD\s0,
GD::Polyline,
\&\s-1GD::SVG\s0,
Image::Magick
